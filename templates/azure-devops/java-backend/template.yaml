apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: azure-java-backend-template
  title: Create a SpringBoot backend application in Azure DevOps with a CI pipeline
  description: Create a starter SpringBoot backend application with a CI pipeline
  tags:
    - recommended
    - springboot
    - java
    - azure
spec:
  owner: alex-malo
  system: rhdh
  type: service

  parameters:
    - title: Choose a location
      required:
        - orgName
        - projectName
        - repoName
      properties:
        orgName:
          title: Organization
          type: string
          default: demo-devhub
          enum:
            - amalo
            - demo-devhub
          description: The Organization that this repo will belong to
        projectName:
          title: Project
          type: string
          enum:
            - application-A
            - application-B
            - application-C
            - application-D
            - test
          description: The Project that this repo will belong to
        repoName:
          title: Repository
          type: string
          description: The name of the repository

    - title: Provide information about the new component
      required:
        - sameNameAsRepo
        - port
      properties:
        sameNameAsRepo:
          title: Use repository name as service name?
          type: boolean
          default: true
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        port:
          title: Port
          type: number
          default: 8080
          description: Override the port exposed for the application
      dependencies:
        sameNameAsRepo:
          allOf:
            - if:
                properties:
                  sameNameAsRepo:
                    const: false
              then:
                properties:
                  customName:
                    title: Component name
                    type: string

  steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          # azure devops uses `my-project/my-repo`
          orgName: ${{ parameters.orgName }}
          projectName: ${{ parameters.projectName }}
          repoName: ${{ parameters.repoName }}
          name: ${{ parameters.customName if parameters.customName else parameters.repoName }}
          description: ${{ parameters.description }}
          port: ${{ parameters.port }}
          applicationType: website
          sourceControl: dev.azure.com

    - id: catalogTemplate
      name: Generating the Catalog Info Component
      action: fetch:template
      input:
        url: ../../../global-skeletons/catalog-info/
        values:
          orgName: ${{ parameters.orgName }}
          projectName: ${{ parameters.projectName }}
          name: ${{ parameters.customName if parameters.customName else parameters.repoName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          description: ${{ parameters.description }}
          port: ${{ parameters.port }}
          applicationType: website
          sourceControl: dev.azure.com

    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:azure
      input:
        allowedHosts: ['dev.azure.com']
        description: ${{ parameters.description }}
        repoUrl: dev.azure.com?organization=${{ parameters.orgName }}&project=${{ parameters.projectName }}&repo=${{ parameters.repoName }}
        defaultBranch: main

    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

    #- id: create-container-registry
    #  name: Creating the container registry repository
    #  action: quay:create-repository
    #  input:
    #    name: ${{ parameters.repoName }}
    #    visibility: public
    #    description: Image repository for ${{ parameters.repoName }}
    #    token: test
    #    baseUrl: "https://quay-lpq8z.apps.cluster-lpq8z.sandbox2416.opentlc.com/"
    #    namespace: ${{ parameters.orgName }}
        
    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating:
          - azure-pipelines.yml
        values:
          component_id: ${{ parameters.repoName }}
          description: ${{ parameters.description }}
          destination: https://${{ parameters.orgName }}@dev.azure.com/${{ parameters.orgName }}/${{ parameters.projectName }}/_git/${{ parameters.repoName }}-gitops
          source_repository: https://${{ parameters.orgName }}@dev.azure.com/${{ parameters.orgName }}/${{ parameters.projectName }}/_git/repo=${{ parameters.repoName }}-gitops
          repository_name: ${{ parameters.repoName }}
          git_owner: ${{ parameters.repoName }}
          cluster: .apps.ocp.malo.lab
          namespace: ${{ parameters.repoName }}-dev
          image_registry: ${{ parameters.image_registry }}
          image_host: quay.io
          image_organization: alexmalo
          image_name: devhub-demo
          image_tag: ${{ parameters.repoName }}-latest
          port: 8080
          repository_host: ${{ parameters.repo.host }}
          deployment_name: ${{ parameters.repoName }}
          user: user1
        targetPath: ./tenant-gitops

    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:azure
      input:
        sourcePath: ./tenant-gitops
        allowedHosts: ['dev.azure.com']
        description: gitops resources for ${{ parameters.repoName }}
        repoUrl: dev.azure.com?organization=${{ parameters.orgName }}&project=${{ parameters.projectName }}&repo=${{ parameters.repoName }}-gitops
        defaultBranch: main

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.repoName }}-bootstrap
        argoInstance: malolab
        namespace: janus-argocd
        repoUrl: https://${{ parameters.orgName }}@dev.azure.com/${{ parameters.orgName }}/${{ parameters.projectName }}/_git/${{ parameters.repoName }}-gitops
        path: 'argocd/'
 
  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
